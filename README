Nginx push module - redirect a request body to other waiting requests

If you want a long-polling server but don't want to wait on idle connections
via upstream proxies, use this module to have nginx accept client connections.
Communication with clients is done via a different location, one only accessible
to your application.

----------- Example Config ------------
http {
	#maximum amount of memory the push module is allowed to use 
	#for buffering and stuff
	push_shm_size	12M; #default is 3M

	#push_server
	server {
	listen       localhost:8089; 
		location / {
			default_type  text/plain;
			set $push_id $arg_id; #/?id=239aff3 or somesuch
			push_server;
			push_buffer_timeout 2h; #buffered messages expire after 2 hours
		}
	}

	#long-polling client
	server {
		listen       8088;
		location / {
			default_type  text/plain;
			set $push_id $arg_id; #/?id=239aff3 or somesuch
			push_client;
		}
	}
}	

-- Configuration options & variables --
Options:
push_server (no arguments,  server or location config)
defines a server or location as the push_server, described below.

push_client (no arguments, in server or location config)
defines a push_client server or location

push_queue_messages (on|off (default to on), anywhere)
Whether or not message queuing is enabled. If set to off, 
messages will be delivered only if a push_client connection is already 
present for the id.

push_message_timeout (time (default to 1h), anywhere)
How long a message may be queued before it is considered expired.
For messages that never expire, set this to 0.

push_shm_size (size (default to 3M), main config)
The size of the memory chunk this module will use for all message queuing and
buffering.

Variables:
$push_id
The id associated with a push_server or push_client.
set $push_id $arg_id would set $push_id to the url parameter "id"

------------ Operation ----------------	
Assuming the example config given above:
Clients will connect to http://example.com:8088/?id=... and have the 
response delayed until a message is POSTed to http://localhost:8089/?id=...
Messages can be sent to clients that have not yet connected, i.e. they are queued.

Upon sending a request to a push_server location, the server will respond with 
a 201 Created if the message has been sent. If it must be queued up (i.e. the 
push_client id is presently connected), a 202 Accepted will be sent.
 
It's a damn good idea to make sure the push_server location is not visible
publically, as it is intended for use only by your application.

--------- "Protocol" spec -------------
Let push_server refer to a location (or server) configured with the push_server; option.
Let push_client refer to a location (or server) configured with the push_client; option.

at push_client:
	Only POST requests are allowed to this location. The response will be delayed until a message
	for the $push_id of said requests becomes available, at which point its contents will be sent
	in the body of the response with a 200 OK status code.
	
	When two requests to this location have the same $push_id, messages will be delivered to the
	newer of the two. The older request receives an immediate response with a 409 Conflict status
	code.
	
at push_server:
	POST, PUT, and DELETE requests are allowed at this location.
	A POST request will have its body ("the message"), sent to the request identified by 
	$push_id, with the Content-Type header forwarded. If no such request exists, the message 
	will be queued until it can be sent. Multiple messages can be queued, and will be received 
	in a FILO order. When the request results in an immediate sending of the message (i.e. there 
	was a waiting request identified by $push_id), the response will have a 201 Created status. 
	If the message is queued, a 202 Accepted status is sent back.
	
	A PUT request behaves identically to a POST with the exception that messages will NOT be queued.
	Instead, if this request is sent while there is no waiting request identified by $push_id,
	the message will be lost, and the server will return a 200 OK status code.
	
	(NOT IMPLEMENTED YET) a DELETE deletes all messages intended for $push_id. If there is a waiting
	request on push_client identified by $push_id, it will be immediately responded to with a
	204 No Content status code.


-----------------------------

TODO: 
	- Implelent DELETE for push_server. 
	- Add a push_accomodate_strangers setting (presently defaulting to on). When set to off, requests
	  with a previously-unseen $push_id will be rejected. 
	- When POSTing to push_server, if Content-Type is "message/http", the response sent to $push_id 
	  should be created from the body of the request.

