#!/usr/bin/ruby
SRC_DIR="../src"
CONFIG_IN="nchan_commands.rb"
if ARGV[0]
  CONFIG_OUT=ARGV[0]
end
  
class CfCmd #let's make a DSL!
  class Cmd
    attr_accessor :name, :type, :set, :conf, :offset_name
    attr_accessor :contexts, :args, :legacy, :alt
    def type_line
      lut={ main: :NGX_HTTP_MAIN_CONF, srv: :NGX_HTTP_SRV_CONF, loc: :NGX_HTTP_LOC_CONF}
      args_lut= {0 => :NGX_CONF_NOARGS, false => :NGX_CONF_NOARGS}
      
      (1..7).each{|n| args_lut[n]="NGX_CONF_TAKE#{n}"}
      
      tl=[]
      
      contexts.each { |v| tl << lut[v] }
      (Enumerable === args ? args : ([args]) ).each {|arg| tl << args_lut[arg]}
      tl.join "|"
    end
    
    def conf_line
      ({ loc_conf: :NGX_HTTP_LOC_CONF_OFFSET, main_conf: :NGX_HTTP_MAIN_CONF_OFFSET})[conf]
    end
    def offset_line
      tpdf={main_conf: :nchan_main_conf_t, loc_conf: :nchan_loc_conf_t}
      if offset_name
        "offsetof(#{tpdf[conf]}, #{offset_name})"
      else
        0
      end
    end
    def initialize(name, func)
      self.name=name
      self.set=func
    end
    def conf_offset(val)

    end
    
    def to_c_def(altname=nil, comment=nil)
      str= <<-END.gsub(/^ {6}/, '')
        { ngx_string("#{altname || name}"),#{comment && " //#{comment}"}
          #{type_line},
          #{set},
          #{conf_line},
          #{offset_line},
          NULL } ,
      END
    end
    def to_s
      str=[]
      str << to_c_def
      str << to_c_def(legacy, "legacy for #{name}") if legacy
      (alt || []).each {|v| str << to_c_def(v, "alt for #{name}")}
      str << "\r\n"
      str.join
    end
  end
  def initialize(&block)
    @cmds=[]
    instance_eval &block
  end
  def method_missing(name, *args)
    define_cmd name, *args
  end
  def define_cmd(name, valid_contexts, handler, conf, opt={})
    cmd=Cmd.new name, handler
    cmd.args= opt.has_key?(:args) ? opt[:args] : 1
    cmd.contexts= valid_contexts
    if Array === conf
      cmd.conf=conf[0]
      cmd.offset_name=conf[1]
    else
      cmd.conf=conf
    end
    cmd.legacy=opt[:legacy]
    cmd.alt=opt[:alt]
    @cmds << cmd
  end
  
  def to_s
    str= <<-END.gsub(/^ {6}/, '')
      //AUTOGENERATED, do not edit! see #{CONFIG_IN}
      static ngx_command_t  nchan_commands[] = {
        #{@cmds.join}
        ngx_null_command
      };
    END
  end
end

cf=eval File.read("#{SRC_DIR}/#{CONFIG_IN}")

if CONFIG_OUT
  File.write "#{SRC_DIR}/#{CONFIG_OUT}", cf.to_s
  puts "wrote config commands to #{CONFIG_OUT}"
else
  puts cf.to_s
end